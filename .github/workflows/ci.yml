name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  dev-scan-codeql:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    # env:
    #   ACTIONS_RUNNER_DEBUG: true
    #   ACTIONS_STEP_DEBUG: true
    steps:
      - name: Do nothing
        run: echo "This is a placeholder step that does nothing."
      # - name: Checkout repository
      #   uses: actions/checkout@v4
      # - name: Initialize CodeQL
      #   uses: github/codeql-action/init@v3
      #   with:
      #     languages: 'python'
      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v3

  ops-scan-checkov:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform

  build-and-push:
    runs-on: ubuntu-latest
    needs: [dev-scan-codeql, ops-scan-checkov]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Update to the latest version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          role-session-name: GitHubActions
          role-duration-seconds: 10800  # Adjust this value as needed

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Clean ECR - the manifest lists and the original images
        # if: success()
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ACTIONS_RUNNER_DEBUG: true
          ACTIONS_STEP_DEBUG: true
        run: echo "This is a placeholder step that does nothing."
        # run: |
        #   images=$(aws ecr list-images --repository-name $ECR_REPOSITORY --output json)
        #   echo "Deleting all existing ECR images:"
        #   echo "$images" | jq -c '.[]'
        #   for image in $(echo "$images" | jq -c '.[]'); do
        #     imageDigest=$(echo $image | jq -r '.imageDigest')
        #     manifestList=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageDigest=$imageDigest --query 'imageDetails[0].imageManifest' --output text)
        #     if [[ $manifestList == *"application/vnd.docker.distribution.manifest.list.v2+json"* ]]; then
        #       echo "Deleting manifest list: $imageDigest"
        #       aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$imageDigest
        #     fi
        #   done
        #   for image in $(echo "$images" | jq -c '.[]'); do
        #     imageDigest=$(echo $image | jq -r '.imageDigest')
        #     echo "Deleting image: $imageDigest"
        #     aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$imageDigest
        #   done

      - name: Build, push, and test Docker image
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd ECR/app
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${SHORT_SHA}"
          echo "SHORT_SHA=${SHORT_SHA}"
          echo "IMAGE_NAME=${IMAGE_NAME}"
          docker buildx build --platform linux/amd64,linux/arm64 -t $IMAGE_NAME -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest --push .
          docker pull $IMAGE_NAME
          docker run -d -p 8080:8080 --name test-container $IMAGE_NAME
          sleep 10  # Increase sleep duration to give the container more time to start
          docker logs test-container  # Check container logs for debugging
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ping | grep -q "200" && echo "Test Passed!" || { echo "Test Failed!"; exit 1; }
          docker stop test-container
          docker rm test-container

      - name: Post-deployment steps (optional)
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "Docker images have been successfully pushed to ECR with tags ${SHORT_SHA} and latest."
