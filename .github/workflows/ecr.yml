name: Analyze, Build, Deploy, and Test ECR Image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          source-root: .
          github-auth: ${{ secrets.GITHUB_TOKEN }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-and-push:
    runs-on: ubuntu-latest
    needs: [analyze]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Update to the latest version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3  # Update to the latest version
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          role-session-name: GitHubActions
          role-duration-seconds: 10800  # Adjust this value as needed

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, push, and test Docker image
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd ECR/app
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          IMAGE_NAME="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:${SHORT_SHA}"
          echo "SHORT_SHA=${SHORT_SHA}"
          echo "IMAGE_NAME=${IMAGE_NAME}"

          # Build and push the Docker image
          docker buildx build --platform linux/amd64,linux/arm64 -t $IMAGE_NAME -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest --push .

          # Pull and run the Docker image for testing
          docker pull $IMAGE_NAME
          docker run -d -p 8080:8080 --name test-container $IMAGE_NAME
          sleep 10 # Increase sleep duration to give the container more time to start
          docker logs test-container # Check container logs for debugging
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ping | grep -q "200" && echo "Test Passed!" || { echo "Test Failed!"; exit 1; }
          docker stop test-container
          docker rm test-container

      - name: List previous ECR images
        if: success()
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          images=$(aws ecr list-images --repository-name $ECR_REPOSITORY --filter "tagStatus=TAGGED" --query 'imageIds[?imageTag!=`latest`]' --output json)
          echo "Listing all images except the latest:"
          echo "$images" | jq -c '.[]'

      - name: Post-deployment steps (optional)
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)
          echo "Docker images have been successfully pushed to ECR with tags ${SHORT_SHA} and latest."

